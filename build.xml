<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="./" default="dist" name="UltimateSpeaker">
	<!--ANT 1.7 is required                                        -->
	<dirname property="basedir" file="${ant.file.UltimateSpeaker}" />
	<property name="distdir" value="${basedir}/Deploy" />
	<property name="libsdir" value="${distdir}/libs" />
	<property name="builddir" value="${distdir}/bin" />
	<property name="jarsdir" value="${distdir}/jars" />
	<property name="releasedir" value="${distdir}/release" />
	<property name="mainClass" value="com.aasenov.MainClass" />

	<!--***************************************** Dependent projects declare section *****************************************-->
	<property name="AdminUI.dir" value="AdminUI" />
	<property name="AdminUI.buildfile" value="${AdminUI.dir}/build.xml" />
	<import file="${AdminUI.buildfile}" optional="true" />

	<property name="Data.dir" value="Data" />
	<property name="Data.buildfile" value="${Data.dir}/build.xml" />
	<import file="${Data.buildfile}" optional="true" />

	<property name="Commons.dir" value="Commons" />
	<property name="Commons.buildfile" value="${Commons.dir}/build.xml" />
	<import file="${Commons.buildfile}" optional="true" />

	<property name="RestAPI.dir" value="RestAPI" />
	<property name="RestAPI.buildfile" value="${RestAPI.dir}/build.xml" />
	<import file="${RestAPI.buildfile}" optional="true" />

	<property name="SearchEngine.dir" value="SearchEngine" />
	<property name="SearchEngine.buildfile" value="${SearchEngine.dir}/build.xml" />
	<import file="${SearchEngine.buildfile}" optional="true" />

	<property name="TextParse.dir" value="TextParse" />
	<property name="TextParse.buildfile" value="${TextParse.dir}/build.xml" />
	<import file="${TextParse.buildfile}" optional="true" />

	<property name="TextSynthesis.dir" value="TextSynthesis" />
	<property name="TextSynthesis.buildfile" value="${TextSynthesis.dir}/build.xml" />
	<import file="${TextSynthesis.buildfile}" optional="true" />

	<property name="RestletWadlExt.dir" value="RestletWadlExt" />
	<property name="RestletWadlExt.buildfile" value="${RestletWadlExt.dir}/build.xml" />
	<import file="${RestletWadlExt.buildfile}" optional="true" />

	<!--***************************************** Dependent projects targets section *****************************************-->
	<target depends="RestAPI, AdminUI.dist" name="AdminUI">
		<copy todir="${builddir}">
			<fileset dir="${AdminUI.builddir}" />
		</copy>
	</target>

	<target depends="Commons, Data.dist" name="Data">
		<copy todir="${builddir}">
			<fileset dir="${Data.builddir}" />
		</copy>
	</target>

	<target depends="Commons.dist" name="Commons">
		<copy todir="${builddir}">
			<fileset dir="${Commons.builddir}" />
		</copy>
	</target>

	<target depends="Data, SearchEngine, TextParse, TextSynthesis, RestletWadlExt, RestAPI.dist" name="RestAPI">
		<copy todir="${builddir}">
			<fileset dir="${RestAPI.builddir}" />
		</copy>
	</target>

	<target depends="Commons, SearchEngine.dist" name="SearchEngine">
		<copy todir="${builddir}">
			<fileset dir="${SearchEngine.builddir}" />
			<fileset dir="${SearchEngine.basedir}/src/main/resources" />
		</copy>
	</target>

	<target depends="TextParse.dist" name="TextParse">
		<copy todir="${builddir}">
			<fileset dir="${TextParse.builddir}" />
		</copy>
	</target>

	<target depends="TextSynthesis.dist" name="TextSynthesis">
		<copy todir="${builddir}">
			<fileset dir="${TextSynthesis.builddir}" />
		</copy>
	</target>

	<target depends="RestletWadlExt.dist" name="RestletWadlExt">
		<copy todir="${builddir}">
			<fileset dir="${RestletWadlExt.builddir}" />
		</copy>
	</target>


	<!--***************************************** Generate classpath section *****************************************-->
	<!-- Include all dependency jars from libs folder. -->
	<path id="classpath">
		<fileset dir="${Commons.dir}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- convert classpath to a flat list/string for use in manifest task -->
	<pathconvert property="mf.classpath" pathsep=" ">
		<path refid="classpath" />
		<flattenmapper />
	</pathconvert>

	<!--***************************************** Main targets section *****************************************-->
	<target name="build" depends="init, AdminUI">
		<!--Copy resources to dist -->
		<copy todir="${releasedir}">
			<fileset dir="${basedir}/AdminUI/src/main/resources">
				<include name="*" />
			</fileset>
		</copy>

		<!--Copy WebUI dist -->
		<copy todir="${releasedir}">
			<fileset dir="${basedir}/WebUI/src/main/resources" />
		</copy>

		<!-- Prepare external libraries -->
		<copy todir="${libsdir}" flatten="true">
			<fileset dir="${Commons.dir}/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${Commons.dir}/lib">
				<include name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="clean">
		<echo>UltimateSpeaker : removing build directories</echo>
		<delete dir="${distdir}" />
	</target>

	<!-- init target - Create the build and dist dirs folder structures -->
	<target name="init" depends="clean">
		<echo>UltimateSpeaker : creating build infrastructure</echo>
		<tstamp />
		<mkdir dir="${builddir}" />
		<mkdir dir="${libsdir}" />
		<mkdir dir="${jarsdir}" />
		<mkdir dir="${releasedir}" />
	</target>

	<target name="dist" depends="build">
		<jar destfile="${releasedir}/UltimateSpeaker.jar">
			<manifest>
				<attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
				<attribute name="Rsrc-Main-Class" value="${mainClass}" />
				<attribute name="Class-Path" value="." />
				<attribute name="Rsrc-Class-Path" value="./ ${mf.classpath}" />
			</manifest>
			<zipfileset src="jar-in-jar-loader.zip" />
			<fileset dir="${builddir}" />
			<zipfileset dir="${libsdir}/" includes="*.jar" />
		</jar>
	</target>
</project>
